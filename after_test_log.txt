Running all tests...

 RUN  v0.33.0 /app/library

 âœ“ src/error/flatten/flatten.test.ts > flatten > should flatten only root error
 âœ“ src/error/flatten/flatten.test.ts > flatten > should flatten only nested error
 âœ“ src/error/flatten/flatten.test.ts > flatten > should flatten root and nested error
 âœ“ src/validations/hash/hash.test.ts > hash > should pass only a valid hash string
 âœ“ src/validations/hash/hash.test.ts > hash > should reject invalid hash strings
 âœ“ src/validations/hash/hash.test.ts > hash > should return custom error message
 âœ“ src/validations/email/email.test.ts > email > should pass only emails
 âœ“ src/validations/email/email.test.ts > email > should return custom error message
 âœ“ src/utils/pipeResult/utils/pipeIssue/pipeIssue.test.ts > pipeIssue > should return issue object
 âœ“ src/methods/forward/forward.test.ts > forward > should forward issues to end of path list
 âœ“ src/methods/forward/forward.test.ts > forward > should stop forwarding if path input is undefined
 âœ“ src/methods/forward/forward.test.ts > forward > should do nothing if there are no issues
 âœ“ src/validations/creditCard/creditCard.test.ts > creditCard > should pass valid cards
 âœ“ src/validations/creditCard/creditCard.test.ts > creditCard > should return custom error message
 âœ“ src/validations/hexadecimal/hexadecimal.test.ts > hexadecimal > should pass only hexadecimal strings
 âœ“ src/validations/hexadecimal/hexadecimal.test.ts > hexadecimal > should return custom error message
 âœ“ src/methods/brand/brand.test.ts > brand > should not affect parse
 âœ“ src/methods/brand/brand.test.ts > brand > should brand schema type
 âœ“ src/methods/brand/brand.test.ts > brand > should distinguish between brands
 âœ“ src/methods/brand/brand.test.ts > brand > should allow multiple branding
 âœ“ src/methods/brand/brand.test.ts > brand > should support brand hierarchy
 âœ“ src/utils/i18n/i18n.test.ts > i18n > should return context message
 âœ“ src/utils/i18n/i18n.test.ts > i18n > should return specific message
 âœ“ src/utils/i18n/i18n.test.ts > i18n > should return schema message
 âœ“ src/utils/i18n/i18n.test.ts > i18n > should return config message
 âœ“ src/utils/i18n/i18n.test.ts > i18n > should return global message
 âœ“ src/utils/i18n/i18n.test.ts > i18n > should return issue message
 âœ“ src/methods/getDefault/getDefaultAsync.test.ts > getDefaultAsync > should return undefined
 âœ“ src/methods/getDefault/getDefaultAsync.test.ts > getDefaultAsync > should return optional default
 âœ“ src/methods/getDefault/getDefaultAsync.test.ts > getDefaultAsync > should return nullable default
 âœ“ src/methods/getDefault/getDefaultAsync.test.ts > getDefaultAsync > should return nullish default
 âœ“ src/methods/getDefaults/getDefaultsAsync.test.ts > getDefaultsAsync > should return undefined
 âœ“ src/methods/getDefaults/getDefaultsAsync.test.ts > getDefaultsAsync > should return default value
 âœ“ src/methods/getDefaults/getDefaultsAsync.test.ts > getDefaultsAsync > should return object defaults
 âœ“ src/methods/getDefaults/getDefaultsAsync.test.ts > getDefaultsAsync > should return tuple defaults
 âœ“ src/utils/schemaIssue/schemaIssue.test.ts > schemaIssue > should return results with issues
 âœ“ src/methods/getFallbacks/getFallbacksAsync.test.ts > getFallbacksAsync > should return undefined
 âœ“ src/methods/getFallbacks/getFallbacksAsync.test.ts > getFallbacksAsync > should return fallbackAsync value
 âœ“ src/methods/getFallbacks/getFallbacksAsync.test.ts > getFallbacksAsync > should return objectAsync fallbacks
 âœ“ src/methods/getFallbacks/getFallbacksAsync.test.ts > getFallbacksAsync > should return tuple fallbacks
 âœ“ src/validations/isoTimestamp/isoTimestamp.test.ts > isoTimestamp > should pass only ISO timestamps
 âœ“ src/validations/isoTimestamp/isoTimestamp.test.ts > isoTimestamp > should return custom error message
 âœ“ src/validations/mac/mac.test.ts > mac > should pass only MAC address
 âœ“ src/validations/mac/mac.test.ts > mac > should return custom error message
 âœ“ src/validations/minValue/minValue.test.ts > minValue > should pass only valid values
 âœ“ src/validations/minValue/minValue.test.ts > minValue > should return custom error message
 âœ“ src/validations/maxValue/maxValue.test.ts > maxValue > should pass only valid values
 âœ“ src/validations/maxValue/maxValue.test.ts > maxValue > should return custom error message
 âœ“ src/schemas/literal/literalAsync.test.ts > literalAsync > should pass only the literal
 âœ“ src/schemas/literal/literalAsync.test.ts > literalAsync > should throw custom error
 âœ“ src/validations/octal/octal.test.ts > octal > should pass only valid strings
 âœ“ src/validations/octal/octal.test.ts > octal > should return custom error message
 âœ“ src/validations/hexColor/hexColor.test.ts > hexColor > should pass only a finite number
 âœ“ src/validations/hexColor/hexColor.test.ts > hexColor > should return custom error message
 âœ“ src/utils/pipeResult/pipeResultAsync.test.ts > await pipeResultAsync > should execute the pipe
 âœ“ src/utils/pipeResult/pipeResultAsync.test.ts > await pipeResultAsync > should return every issue
 âœ“ src/utils/pipeResult/pipeResultAsync.test.ts > await pipeResultAsync > should return only first issue
 âœ“ src/utils/pipeResult/pipeResultAsync.test.ts > await pipeResultAsync > should skip the pipeline
 âœ“ src/methods/merge/merge.test.ts > merge > should merge object schemas
 âœ“ src/methods/merge/merge.test.ts > merge > should overwrite schema of key
 âœ“ src/methods/merge/merge.test.ts > merge > should throw custom error
 âœ“ src/methods/merge/merge.test.ts > merge > should execute pipe
 âœ“ src/methods/merge/mergeAsync.test.ts > mergeAsync > should merge object schemas
 âœ“ src/methods/merge/mergeAsync.test.ts > mergeAsync > should overwrite schema of key
 âœ“ src/methods/merge/mergeAsync.test.ts > mergeAsync > should throw custom error
 âœ“ src/methods/merge/mergeAsync.test.ts > mergeAsync > should execute pipe
 âœ“ src/methods/forward/forwardAsync.test.ts > forwardAsync > should forward issues to end of path list
 âœ“ src/methods/forward/forwardAsync.test.ts > forwardAsync > should stop forwarding if path input is undefined
 âœ“ src/methods/forward/forwardAsync.test.ts > forwardAsync > should do nothing if there are no issues
 âœ“ src/methods/safeParse/safeParse.test.ts > safeParse > should return successful output
 âœ“ src/methods/safeParse/safeParse.test.ts > safeParse > should return typed output with issues
 âœ“ src/methods/safeParse/safeParse.test.ts > safeParse > should return type issues
 âœ“ src/methods/transform/transform.test.ts > transform > should transform string to number
 âœ“ src/methods/transform/transform.test.ts > transform > should add new key to object
 âœ“ src/methods/transform/transform.test.ts > transform > should return type issue
 âœ“ src/methods/transform/transform.test.ts > transform > should return string issue
 âœ“ src/methods/transform/transform.test.ts > transform > should validate output with pipe
 âœ“ src/methods/transform/transform.test.ts > transform > should validate output with schema
 âœ“ src/methods/transform/transformAsync.test.ts > transformAsync > should transformAsync string to number
 âœ“ src/methods/transform/transformAsync.test.ts > transformAsync > should add new key to object
 âœ“ src/methods/transform/transformAsync.test.ts > transformAsync > should return type issue
 âœ“ src/methods/transform/transformAsync.test.ts > transformAsync > should return string issue
 âœ“ src/methods/transform/transformAsync.test.ts > transformAsync > should validate output with pipe
 âœ“ src/methods/transform/transformAsync.test.ts > transformAsync > should validate output with schema
 âœ“ src/methods/safeParse/safeParseAsync.test.ts > safeParseAsync > should return successful output
 âœ“ src/methods/safeParse/safeParseAsync.test.ts > safeParseAsync > should return typed output with issues
 âœ“ src/methods/safeParse/safeParseAsync.test.ts > safeParseAsync > should return type issues
 âœ“ src/validations/imei/imei.test.ts > imei > should pass only IMEIs
 âœ“ src/validations/imei/imei.test.ts > imei > should return custom error message
 âœ“ src/validations/ip/ip.test.ts > ip > should pass only IP v4 or v6
 âœ“ src/validations/ip/ip.test.ts > ip > should return custom error message
 âœ“ src/validations/uuid/uuid.test.ts > uuid > should pass only UUIDs
 âœ“ src/validations/uuid/uuid.test.ts > uuid > should return custom error message
 âœ“ src/validations/mac64/mac64.test.ts > mac64 > should pass only MAC address
 âœ“ src/validations/mac64/mac64.test.ts > mac64 > should return custom error message
 âœ“ src/schemas/nonOptional/nonOptionalAsync.test.ts > nonOptionalAsync > should not pass undefined
 âœ“ src/schemas/nonOptional/nonOptionalAsync.test.ts > nonOptionalAsync > should throw custom error
 âœ“ src/schemas/nonNullish/nonNullishAsync.test.ts > nonNullishAsync > should not pass null or undefined
 âœ“ src/schemas/nonNullish/nonNullishAsync.test.ts > nonNullishAsync > should throw custom error
 âœ“ src/schemas/set/set.test.ts > set > should pass only sets
 âœ“ src/schemas/set/set.test.ts > set > should throw custom error
 âœ“ src/schemas/set/set.test.ts > set > should throw every issue
 âœ“ src/schemas/set/set.test.ts > set > should throw only first issue
 âœ“ src/schemas/set/set.test.ts > set > should return issue path
 âœ“ src/schemas/set/set.test.ts > set > should execute pipe
 âœ“ src/schemas/set/set.test.ts > set > should execute pipe if output is typed
 âœ“ src/schemas/set/set.test.ts > set > should skip pipe if output is not typed
 âœ“ src/schemas/variant/variant.test.ts > variant > should pass only variant values
 âœ“ src/schemas/variant/variant.test.ts > variant > should throw custom error
 âœ“ src/schemas/variant/variant.test.ts > variant > should execute pipe
 âœ“ src/methods/omit/omitAsync.test.ts > omitAsync > should omit two object keys
 âœ“ src/methods/omit/omitAsync.test.ts > omitAsync > should throw custom error
 âœ“ src/methods/omit/omitAsync.test.ts > omitAsync > should execute pipe
 âœ“ src/schemas/union/unionAsync.test.ts > unionAsync > should pass only union values
 âœ“ src/schemas/union/unionAsync.test.ts > unionAsync > should throw custom error
 âœ“ src/schemas/union/unionAsync.test.ts > unionAsync > should execute pipe with valid result
 âœ“ src/schemas/union/unionAsync.test.ts > unionAsync > should execute pipe with single typed result
 âœ“ src/schemas/union/unionAsync.test.ts > unionAsync > should execute pipe with multiple typed results
 âœ“ src/schemas/union/unionAsync.test.ts > unionAsync > should return single untyped result
 âœ“ src/schemas/union/union.test.ts > union > should pass only union values
 âœ“ src/schemas/union/union.test.ts > union > should throw custom error
 âœ“ src/schemas/union/union.test.ts > union > should execute pipe with valid result
 âœ“ src/schemas/union/union.test.ts > union > should execute pipe with single typed result
 âœ“ src/schemas/union/union.test.ts > union > should execute pipe with multiple typed results
 âœ“ src/schemas/union/union.test.ts > union > should return single untyped result
 âœ“ src/schemas/map/map.test.ts > map > should pass only maps
 âœ“ src/schemas/map/map.test.ts > map > should throw custom error
 âœ“ src/schemas/map/map.test.ts > map > should throw every issue
 âœ“ src/schemas/map/map.test.ts > map > should throw only first issue
 âœ“ src/schemas/map/map.test.ts > map > should return issue path
 âœ“ src/schemas/map/map.test.ts > map > should execute pipe
 âœ“ src/schemas/map/map.test.ts > map > should execute pipe if output is typed
 âœ“ src/schemas/map/map.test.ts > map > should skip pipe if output is not typed
 âœ“ src/methods/required/requiredAsync.test.ts > requiredAsync > should have non optional keys
 âœ“ src/methods/required/requiredAsync.test.ts > requiredAsync > should throw custom error
 âœ“ src/methods/required/requiredAsync.test.ts > requiredAsync > should execute pipe
 âœ“ src/schemas/array/arrayAsync.test.ts > array > should pass only arrays
 âœ“ src/schemas/array/arrayAsync.test.ts > array > should throw custom error
 âœ“ src/schemas/array/arrayAsync.test.ts > array > should throw every issue
 âœ“ src/schemas/array/arrayAsync.test.ts > array > should throw only first issue
 âœ“ src/schemas/array/arrayAsync.test.ts > array > should return issue path
 âœ“ src/schemas/array/arrayAsync.test.ts > array > should execute pipe
 âœ“ src/schemas/array/arrayAsync.test.ts > array > should execute pipe if output is typed
 âœ“ src/schemas/array/arrayAsync.test.ts > array > should skip pipe if output is not typed
 âœ“ src/methods/pick/pickAsync.test.ts > pickAsync > should pick two object keys
 âœ“ src/methods/pick/pickAsync.test.ts > pickAsync > should throw custom error
 âœ“ src/methods/pick/pickAsync.test.ts > pickAsync > should execute pipe
 âœ“ src/methods/getFallbacks/getFallbacks.test.ts > getFallbacks > should return undefined
 âœ“ src/methods/getFallbacks/getFallbacks.test.ts > getFallbacks > should return fallback value
 âœ“ src/methods/getFallbacks/getFallbacks.test.ts > getFallbacks > should return object fallbacks
 âœ“ src/methods/getFallbacks/getFallbacks.test.ts > getFallbacks > should return tuple fallbacks
 âœ“ src/schemas/array/array.test.ts > array > should pass only arrays
 âœ“ src/schemas/array/array.test.ts > array > should throw custom error
 âœ“ src/schemas/array/array.test.ts > array > should throw every issue
 âœ“ src/schemas/array/array.test.ts > array > should throw only first issue
 âœ“ src/schemas/array/array.test.ts > array > should return issue path
 âœ“ src/schemas/array/array.test.ts > array > should execute pipe
 âœ“ src/schemas/array/array.test.ts > array > should execute pipe if output is typed
 âœ“ src/schemas/array/array.test.ts > array > should skip pipe if output is not typed
 âœ“ src/schemas/literal/literal.test.ts > literal > should pass only the literal
 âœ“ src/schemas/literal/literal.test.ts > literal > should throw custom error
 âœ“ src/schemas/variant/variantAsync.test.ts > variantAsync > should pass only variant values
 âœ“ src/schemas/variant/variantAsync.test.ts > variantAsync > should throw custom error
 âœ“ src/schemas/variant/variantAsync.test.ts > variantAsync > should execute pipe
 âœ“ src/schemas/tuple/tuple.test.ts > tuple > should pass only tuples
 âœ“ src/schemas/tuple/tuple.test.ts > tuple > should throw custom error
 âœ“ src/schemas/tuple/tuple.test.ts > tuple > should throw every issue
 âœ“ src/schemas/tuple/tuple.test.ts > tuple > should throw only first issue
 âœ“ src/schemas/tuple/tuple.test.ts > tuple > should return issue path
 âœ“ src/schemas/tuple/tuple.test.ts > tuple > should execute pipe
 âœ“ src/schemas/tuple/tuple.test.ts > tuple > should execute pipe if output is typed
 âœ“ src/schemas/tuple/tuple.test.ts > tuple > should skip pipe if output is not typed
 âœ“ src/schemas/set/setAsync.test.ts > setAsync > should pass only sets
 âœ“ src/schemas/set/setAsync.test.ts > setAsync > should throw custom error
 âœ“ src/schemas/set/setAsync.test.ts > setAsync > should throw every issue
 âœ“ src/schemas/set/setAsync.test.ts > setAsync > should throw only first issue
 âœ“ src/schemas/set/setAsync.test.ts > setAsync > should return issue path
 âœ“ src/schemas/set/setAsync.test.ts > setAsync > should execute pipe
 âœ“ src/schemas/set/setAsync.test.ts > setAsync > should execute pipe if output is typed
 âœ“ src/schemas/set/setAsync.test.ts > setAsync > should skip pipe if output is not typed
 âœ“ src/schemas/instance/instance.test.ts > instance > should pass only valid instances
 âœ“ src/schemas/instance/instance.test.ts > instance > should throw custom error
 âœ“ src/schemas/instance/instance.test.ts > instance > should execute pipe
 âœ“ src/schemas/intersect/intersect.test.ts > intersect > should pass only intersect values
 âœ“ src/schemas/intersect/intersect.test.ts > intersect > should throw custom error
 âœ“ src/schemas/intersect/intersect.test.ts > intersect > should throw every issue
 âœ“ src/schemas/intersect/intersect.test.ts > intersect > should throw only first issue
 âœ“ src/schemas/intersect/intersect.test.ts > intersect > should execute pipe
 âœ“ src/schemas/special/special.test.ts > special > should pass only pixel strings
 âœ“ src/schemas/special/special.test.ts > special > should throw custom error
 âœ“ src/schemas/special/special.test.ts > special > should execute pipe
 âœ“ src/schemas/map/mapAsync.test.ts > mapAsync > should pass only maps
 âœ“ src/schemas/map/mapAsync.test.ts > mapAsync > should throw custom error
 âœ“ src/schemas/map/mapAsync.test.ts > mapAsync > should throw every issue
 âœ“ src/schemas/map/mapAsync.test.ts > mapAsync > should throw only first issue
 âœ“ src/schemas/map/mapAsync.test.ts > mapAsync > should return issue path
 âœ“ src/schemas/map/mapAsync.test.ts > mapAsync > should execute pipe
 âœ“ src/schemas/map/mapAsync.test.ts > mapAsync > should execute pipe if output is typed
 âœ“ src/schemas/map/mapAsync.test.ts > mapAsync > should skip pipe if output is not typed
 âœ“ src/methods/partial/partialAsync.test.ts > partialAsync > should have optional keys
 âœ“ src/methods/partial/partialAsync.test.ts > partialAsync > should throw custom error
 âœ“ src/methods/partial/partialAsync.test.ts > partialAsync > should execute pipe
 âœ“ src/schemas/date/date.test.ts > date > should pass only dates
 âœ“ src/schemas/date/date.test.ts > date > should throw custom error
 âœ“ src/schemas/date/date.test.ts > date > should execute pipe
 âœ“ src/schemas/tuple/tupleAsync.test.ts > tupleAsync > should pass only tuples
 âœ“ src/schemas/tuple/tupleAsync.test.ts > tupleAsync > should throw custom error
 âœ“ src/schemas/tuple/tupleAsync.test.ts > tupleAsync > should throw every issue
 âœ“ src/schemas/tuple/tupleAsync.test.ts > tupleAsync > should throw only first issue
 âœ“ src/schemas/tuple/tupleAsync.test.ts > tupleAsync > should return issue path
 âœ“ src/schemas/tuple/tupleAsync.test.ts > tupleAsync > should execute pipe
 âœ“ src/schemas/tuple/tupleAsync.test.ts > tupleAsync > should execute pipe if output is typed
 âœ“ src/schemas/tuple/tupleAsync.test.ts > tupleAsync > should skip pipe if output is not typed
 âœ“ src/schemas/intersect/intersectAsync.test.ts > intersectAsync > should pass only intersect values
 âœ“ src/schemas/intersect/intersectAsync.test.ts > intersectAsync > should throw custom error
 âœ“ src/schemas/intersect/intersectAsync.test.ts > intersectAsync > should throw every issue
 âœ“ src/schemas/intersect/intersectAsync.test.ts > intersectAsync > should throw only first issue
 âœ“ src/schemas/intersect/intersectAsync.test.ts > intersectAsync > should execute pipe
 âœ“ src/schemas/string/stringAsync.test.ts > stringAsync > should pass only strings
 âœ“ src/schemas/string/stringAsync.test.ts > stringAsync > should throw custom error
 âœ“ src/schemas/string/stringAsync.test.ts > stringAsync > should execute pipe
 âœ“ src/schemas/instance/instanceAsync.test.ts > instanceAsync > should pass only valid instances
 âœ“ src/schemas/instance/instanceAsync.test.ts > instanceAsync > should throw custom error
 âœ“ src/schemas/instance/instanceAsync.test.ts > instanceAsync > should execute pipe
 âœ“ src/schemas/intersect/utils/mergeOutputs/mergeOutputs.test.ts > mergeOutputs > should detect equal values
 âœ“ src/schemas/intersect/utils/mergeOutputs/mergeOutputs.test.ts > mergeOutputs > should merge arrays
 âœ“ src/schemas/intersect/utils/mergeOutputs/mergeOutputs.test.ts > mergeOutputs > should merge objects
 âœ“ src/methods/getDefault/getDefault.test.ts > getDefault > should return undefined
 âœ“ src/methods/getDefault/getDefault.test.ts > getDefault > should return optional default
 âœ“ src/methods/getDefault/getDefault.test.ts > getDefault > should return nullable default
 âœ“ src/methods/getDefault/getDefault.test.ts > getDefault > should return nullish default
 âœ“ src/schemas/number/numberAsync.test.ts > numberAsync > should pass only numbers
 âœ“ src/schemas/number/numberAsync.test.ts > numberAsync > should throw custom error
 âœ“ src/schemas/number/numberAsync.test.ts > numberAsync > should execute pipe
 âœ“ src/schemas/record/utils/recordArgs/recordArgs.test.ts > recordArgs > should return tuple args
 âœ“ src/utils/restAndDefaultArgs/restAndDefaultArgs.test.ts > restAndDefaultArgs > should return tuple args
 âœ“ src/schemas/bigint/bigintAsync.test.ts > bigintAsync > should pass only bigints
 âœ“ src/schemas/bigint/bigintAsync.test.ts > bigintAsync > should throw custom error
 âœ“ src/schemas/bigint/bigintAsync.test.ts > bigintAsync > should execute pipe
 âœ“ src/validations/ulid/ulid.test.ts > ulid > should pass only ULIDs
 âœ“ src/validations/ulid/ulid.test.ts > ulid > should return custom error message
 âœ“ src/schemas/nonOptional/nonOptional.test.ts > nonOptional > should not pass undefined
 âœ“ src/schemas/nonOptional/nonOptional.test.ts > nonOptional > should throw custom error
 âœ“ src/schemas/nonNullish/nonNullish.test.ts > nonNullish > should not pass null or undefined
 âœ“ src/schemas/nonNullish/nonNullish.test.ts > nonNullish > should throw custom error
 âœ“ src/schemas/nonNullable/nonNullable.test.ts > nonNullable > should not pass null
 âœ“ src/schemas/nonNullable/nonNullable.test.ts > nonNullable > should throw custom error
 âœ“ src/validations/isoTimeSecond/isoTimeSecond.test.ts > isoTimeSecond > should pass only ISO time seconds
 âœ“ src/validations/isoTimeSecond/isoTimeSecond.test.ts > isoTimeSecond > should return custom error message
 âœ“ src/validations/mac48/mac48.test.ts > mac48 > should pass only MAC 48 address
 âœ“ src/validations/mac48/mac48.test.ts > mac48 > should return custom error message
 âœ“ src/methods/strict/strictAsync.test.ts > strict > should detect unknown keys
 âœ“ src/schemas/string/string.test.ts > string > should pass only strings
 âœ“ src/schemas/string/string.test.ts > string > should throw custom error
 âœ“ src/schemas/string/string.test.ts > string > should execute pipe
 âœ“ src/schemas/nullish/nullishAsync.test.ts > nullishAsync > should pass also null and undefined
 âœ“ src/schemas/nullish/nullishAsync.test.ts > nullishAsync > should use default if required
 âœ“ src/schemas/boolean/booleanAsync.test.ts > booleanAsync > should pass only booleans
 âœ“ src/schemas/boolean/booleanAsync.test.ts > booleanAsync > should throw custom error
 âœ“ src/schemas/boolean/booleanAsync.test.ts > booleanAsync > should execute pipe
 âœ“ src/validations/bic/bic.test.ts > bic > should pass only valid BIC codes
 âœ“ src/validations/bic/bic.test.ts > bic > should return custom error message
 âœ“ src/schemas/number/number.test.ts > number > should pass only numbers
 âœ“ src/schemas/number/number.test.ts > number > should throw custom error
 âœ“ src/schemas/number/number.test.ts > number > should execute pipe
 âœ“ src/storages/specificMessage/specificMessage.test.ts > schemaMessage > should set, get and delete message
 âœ“ src/schemas/special/specialAsync.test.ts > specialAsync > should pass only pixel strings
 âœ“ src/schemas/special/specialAsync.test.ts > specialAsync > should throw custom error
 âœ“ src/schemas/special/specialAsync.test.ts > specialAsync > should execute pipe
 âœ“ src/schemas/bigint/bigint.test.ts > bigint > should pass only bigints
 âœ“ src/schemas/bigint/bigint.test.ts > bigint > should throw custom error
 âœ“ src/schemas/bigint/bigint.test.ts > bigint > should execute pipe
 âœ“ src/validations/decimal/decimal.test.ts > decimal > should pass only decimal strings
 âœ“ src/validations/decimal/decimal.test.ts > decimal > should return custom error message
 âœ“ src/methods/strict/strict.test.ts > strict > should detect unknown keys
 âœ“ src/schemas/union/utils/subissues/subissues.test.ts > subissues > should return undefined
 âœ“ src/schemas/union/utils/subissues/subissues.test.ts > subissues > should return subissues
 âœ“ src/utils/stringify/stringify.test.ts > stringify > should return string literal
 âœ“ src/utils/stringify/stringify.test.ts > stringify > should return number literal
 âœ“ src/utils/stringify/stringify.test.ts > stringify > should return bigint literal
 âœ“ src/utils/stringify/stringify.test.ts > stringify > should return boolean literal
 âœ“ src/utils/stringify/stringify.test.ts > stringify > should return type of symbol
 âœ“ src/utils/stringify/stringify.test.ts > stringify > should return type of function
 âœ“ src/utils/stringify/stringify.test.ts > stringify > should return type of undefined
 âœ“ src/utils/stringify/stringify.test.ts > stringify > should return Object constructor name
 âœ“ src/utils/stringify/stringify.test.ts > stringify > should return Array constructor name
 âœ“ src/utils/stringify/stringify.test.ts > stringify > should return Date constructor name
 âœ“ src/utils/stringify/stringify.test.ts > stringify > should return null as string
 âœ“ src/validations/isoDateTime/isoDateTime.test.ts > isoDateTime > should pass only ISO date times
 âœ“ src/validations/isoDateTime/isoDateTime.test.ts > isoDateTime > should return custom error message
 âœ“ src/validations/safeInteger/safeInteger.test.ts > safeInteger > should pass only safe integer
 âœ“ src/validations/safeInteger/safeInteger.test.ts > safeInteger > should return custom error message
 âœ“ src/methods/getDefaults/getDefaults.test.ts > getDefaults > should return undefined
 âœ“ src/methods/getDefaults/getDefaults.test.ts > getDefaults > should return default value
 âœ“ src/methods/getDefaults/getDefaults.test.ts > getDefaults > should return object defaults
 âœ“ src/methods/getDefaults/getDefaults.test.ts > getDefaults > should return tuple defaults
 âœ“ src/methods/omit/omit.test.ts > omit > should omit two object keys
 âœ“ src/methods/omit/omit.test.ts > omit > should throw custom error
 âœ“ src/methods/omit/omit.test.ts > omit > should execute pipe
 âœ“ src/schemas/optional/optionalAsync.test.ts > optionalAsync > should pass also undefined
 âœ“ src/schemas/optional/optionalAsync.test.ts > optionalAsync > should use default if required
 âœ“ src/schemas/nullable/nullableAsync.test.ts > nullableAsync > should pass also null
 âœ“ src/schemas/nullable/nullableAsync.test.ts > nullableAsync > should use default if required
 âœ“ src/validations/cuid2/cuid2.test.ts > cuid2 > should pass only cuid2s
 âœ“ src/validations/cuid2/cuid2.test.ts > cuid2 > should return custom error message
 âœ“ src/methods/pick/pick.test.ts > pick > should pick two object keys
 âœ“ src/methods/pick/pick.test.ts > pick > should throw custom error
 âœ“ src/methods/pick/pick.test.ts > pick > should execute pipe
 âœ“ src/methods/required/required.test.ts > required > should have non optional keys
 âœ“ src/methods/required/required.test.ts > required > should throw custom error
 âœ“ src/methods/required/required.test.ts > required > should execute pipe
 âœ“ src/validations/ipv6/ipv6.test.ts > ipv6 > should pass only IP v6
 âœ“ src/validations/ipv6/ipv6.test.ts > ipv6 > should return custom error message
 âœ“ src/validations/integer/integer.test.ts > integer > should pass only integer
 âœ“ src/validations/integer/integer.test.ts > integer > should return custom error message
 âœ“ src/schemas/nullish/nullish.test.ts > nullish > should pass also null and undefined
 âœ“ src/schemas/nullish/nullish.test.ts > nullish > should use default if required
 âœ“ src/methods/fallback/fallbackAsync.test.ts > fallbackAsync > should use default value
 âœ“ src/methods/fallback/fallbackAsync.test.ts > fallbackAsync > should not use default value
 âœ“ src/validations/ipv4/ipv4.test.ts > ipv4 > should pass only IP v4
 âœ“ src/validations/ipv4/ipv4.test.ts > ipv4 > should return custom error message
 âœ“ src/validations/isoTime/isoTime.test.ts > isoTime > should pass only ISO times
 âœ“ src/validations/isoTime/isoTime.test.ts > isoTime > should return custom error message
 âœ“ src/validations/isoDate/isoDate.test.ts > isoDate > should pass only ISO dates
 âœ“ src/validations/isoDate/isoDate.test.ts > isoDate > should return custom error message
 âœ“ src/validations/url/url.test.ts > url > should pass only URLs
 âœ“ src/validations/url/url.test.ts > url > should return custom error message
 âœ“ src/validations/value/value.test.ts > value > should pass only valid values
 âœ“ src/validations/value/value.test.ts > value > should return custom error message
 âœ“ src/validations/excludes/excludes.test.ts > excludes > should pass only excluded values
 âœ“ src/validations/excludes/excludes.test.ts > excludes > should return custom error message
 âœ“ src/schemas/recursive/recursiveAsync.test.ts > recursiveAsync > should pass only getter schema
 âœ“ src/schemas/recursive/recursiveAsync.test.ts > recursiveAsync > should pass input to getter
 âœ“ src/schemas/date/dateAsync.test.ts > dateAsync > should pass only dates
 âœ“ src/schemas/date/dateAsync.test.ts > dateAsync > should throw custom error
 âœ“ src/schemas/date/dateAsync.test.ts > dateAsync > should execute pipe
 âœ“ src/validations/notValue/notValue.test.ts > notValue > should pass only valid values
 âœ“ src/validations/notValue/notValue.test.ts > notValue > should return custom error message
 âœ“ src/schemas/optional/optional.test.ts > optional > should pass also undefined
 âœ“ src/schemas/optional/optional.test.ts > optional > should use default if required
 âœ“ src/storages/globalMessage/globalMessage.test.ts > globalMessage > should set, get and delete message
 âœ“ src/storages/schemaMessage/schemaMessage.test.ts > schemaMessage > should set, get and delete message
 âœ“ src/methods/partial/partial.test.ts > partial > should have optional keys
 âœ“ src/methods/partial/partial.test.ts > partial > should throw custom error
 âœ“ src/methods/partial/partial.test.ts > partial > should execute pipe
 âœ“ src/methods/withDefault/withDefault.test.ts > withDefault > should use default value
 âœ“ src/methods/withDefault/withDefault.test.ts > withDefault > should not use default value
 âœ“ src/validations/maxSize/maxSize.test.ts > maxSize > should pass only valid sizes
 âœ“ src/validations/maxSize/maxSize.test.ts > maxSize > should return custom error message
 âœ“ src/schemas/nullable/nullable.test.ts > nullable > should pass also null
 âœ“ src/schemas/nullable/nullable.test.ts > nullable > should use default if required
 âœ“ src/methods/fallback/fallback.test.ts > fallback > should use default value
 âœ“ src/methods/fallback/fallback.test.ts > fallback > should not use default value
 âœ“ src/validations/minSize/minSize.test.ts > minSize > should pass only valid sizes
 âœ“ src/validations/minSize/minSize.test.ts > minSize > should return custom error message
 âœ“ src/validations/isoWeek/isoWeek.test.ts > isoWeek > should pass only ISO weeks
 âœ“ src/validations/isoWeek/isoWeek.test.ts > isoWeek > should return custom error message
 âœ“ src/schemas/recursive/recursive.test.ts > recursive > should pass only getter schema
 âœ“ src/schemas/recursive/recursive.test.ts > recursive > should pass the input to the getter function as a parameter
 âœ“ src/schemas/void/voidAsync.test.ts > voidAsync > should pass only void
 âœ“ src/schemas/void/voidAsync.test.ts > voidAsync > should throw custom error
 âœ“ src/validations/notSize/notSize.test.ts > notSize > should pass only valid sizes
 âœ“ src/validations/notSize/notSize.test.ts > notSize > should return custom error message
 âœ“ src/validations/emoji/emoji.test.ts > emoji > should pass only emojis
 âœ“ src/validations/emoji/emoji.test.ts > emoji > should return custom error message
 âœ“ src/validations/multipleOf/multipleOf.test.ts > multipleOf > should pass only multiples
 âœ“ src/validations/multipleOf/multipleOf.test.ts > multipleOf > should return custom error message
 âœ“ src/utils/pipeResult/pipeResult.test.ts > pipeResult > should execute the pipe
 âœ“ src/utils/pipeResult/pipeResult.test.ts > pipeResult > should return every issue
 âœ“ src/utils/pipeResult/pipeResult.test.ts > pipeResult > should return only first issue
 âœ“ src/utils/pipeResult/pipeResult.test.ts > pipeResult > should skip the pipeline
 âœ“ src/schemas/enum/enumAsync.test.ts > enumAsync > should pass only enum values
 âœ“ src/schemas/enum/enumAsync.test.ts > enumAsync > should throw custom error
 âœ“ src/schemas/picklist/picklistAsync.test.ts > picklistAsync > should pass only picklist values
 âœ“ src/schemas/picklist/picklistAsync.test.ts > picklistAsync > should throw custom error
 âœ“ src/validations/maxLength/maxLength.test.ts > maxLength > should pass only valid lengths
 âœ“ src/validations/maxLength/maxLength.test.ts > maxLength > should return custom error message
 âœ“ src/methods/strip/stripAsync.test.ts > stripAsync > should strip unknown keys
 âœ“ src/methods/getFallback/getFallbackAsync.test.ts > getFallbackAsync > should return undefined
 âœ“ src/methods/getFallback/getFallbackAsync.test.ts > getFallbackAsync > should return fallback value
 âœ“ src/methods/parse/parseAsync.test.ts > parseAsync > should parse schema
 âœ“ src/methods/parse/parseAsync.test.ts > parseAsync > should throw error
 âœ“ src/methods/is/is.test.ts > is > should return true
 âœ“ src/methods/is/is.test.ts > is > should return false
 âœ“ src/methods/is/is.test.ts > is > should skip pipeline
 âœ“ src/validations/finite/finite.test.ts > finite > should pass only a finite number
 âœ“ src/validations/finite/finite.test.ts > finite > should return custom error message
 âœ“ src/validations/minLength/minLength.test.ts > minLength > should pass only valid lengths
 âœ“ src/validations/minLength/minLength.test.ts > minLength > should return custom error message
 âœ“ src/validations/equal/equal.test.ts > equal > should pass only equal values
 âœ“ src/validations/equal/equal.test.ts > equal > should return custom error message
 âœ“ src/schemas/boolean/boolean.test.ts > boolean > should pass only booleans
 âœ“ src/schemas/boolean/boolean.test.ts > boolean > should throw custom error
 âœ“ src/schemas/boolean/boolean.test.ts > boolean > should execute pipe
 âœ“ src/schemas/blob/blob.test.ts > blob > should pass only blobs
 âœ“ src/schemas/blob/blob.test.ts > blob > should throw custom error
 âœ“ src/schemas/blob/blob.test.ts > blob > should execute pipe
 âœ“ src/schemas/object/object.test.ts > object > should pass only objects
 âœ“ src/schemas/object/object.test.ts > object > should exclude non-existing keys
 âœ“ src/schemas/object/object.test.ts > object > should throw custom error
 âœ“ src/schemas/object/object.test.ts > object > should throw every issue
 âœ“ src/schemas/object/object.test.ts > object > should throw only first issue
 âœ“ src/schemas/object/object.test.ts > object > should return issue path
 âœ“ src/schemas/object/object.test.ts > object > should execute pipe
 âœ“ src/schemas/object/object.test.ts > object > should execute pipe if output is typed
 âœ“ src/schemas/object/object.test.ts > object > should skip pipe if output is not typed
 âœ“ src/methods/coerce/coerceAsync.test.ts > coerceAsync > should coerce number to string
 âœ“ src/methods/coerce/coerceAsync.test.ts > coerceAsync > should coerce string to number
 âœ“ src/methods/coerce/coerceAsync.test.ts > coerceAsync > should coerce number to date
 âœ“ src/schemas/record/recordAsync.test.ts > recordAsync > should pass only objects
 âœ“ src/schemas/record/recordAsync.test.ts > recordAsync > should throw custom error
 âœ“ src/schemas/record/recordAsync.test.ts > recordAsync > should throw every issue
 âœ“ src/schemas/record/recordAsync.test.ts > recordAsync > should throw only first issue
 âœ“ src/schemas/record/recordAsync.test.ts > recordAsync > should return issue path
 âœ“ src/schemas/record/recordAsync.test.ts > recordAsync > should execute pipe
 âœ“ src/schemas/record/recordAsync.test.ts > recordAsync > should prevent prototype pollution
 âœ“ src/schemas/record/recordAsync.test.ts > recordAsync > should execute pipe if output is typed
 âœ“ src/schemas/record/recordAsync.test.ts > recordAsync > should skip pipe if output is not typed
 âœ“ src/validations/notLength/notLength.test.ts > notLength > should pass only valid lengths
 âœ“ src/validations/notLength/notLength.test.ts > notLength > should return custom error message
 âœ“ src/schemas/undefined/undefinedAsync.test.ts > undefinedAsync > should pass only undefined
 âœ“ src/schemas/undefined/undefinedAsync.test.ts > undefinedAsync > should throw custom error
 âœ“ src/validations/length/length.test.ts > length > should pass only valid lengths
 âœ“ src/validations/length/length.test.ts > length > should return custom error message
 âœ“ src/methods/passthrough/passthroughAsync.test.ts > passthroughAsync > should passthrough unknown keys
 âœ“ src/validations/includes/includes.test.ts > includes > should pass only included values
 âœ“ src/validations/includes/includes.test.ts > includes > should return custom error message
 âœ“ src/schemas/object/objectAsync.test.ts > objectAsync > should pass only objects
 âœ“ src/schemas/object/objectAsync.test.ts > objectAsync > should exclude non-existing keys
 âœ“ src/schemas/object/objectAsync.test.ts > objectAsync > should throw custom error
 âœ“ src/schemas/object/objectAsync.test.ts > objectAsync > should throw every issue
 âœ“ src/schemas/object/objectAsync.test.ts > objectAsync > should throw only first issue
 âœ“ src/schemas/object/objectAsync.test.ts > objectAsync > should return issue path
 âœ“ src/schemas/object/objectAsync.test.ts > objectAsync > should execute pipe
 âœ“ src/schemas/object/objectAsync.test.ts > objectAsync > should execute pipe if output is typed
 âœ“ src/schemas/object/objectAsync.test.ts > objectAsync > should skip pipe if output is not typed
 âœ“ src/methods/strip/strip.test.ts > strip > should strip unknown keys
 âœ“ src/schemas/record/record.test.ts > record > should pass only objects
 âœ“ src/schemas/record/record.test.ts > record > should throw custom error
 âœ“ src/schemas/record/record.test.ts > record > should throw every issue
 âœ“ src/schemas/record/record.test.ts > record > should throw only first issue
 âœ“ src/schemas/record/record.test.ts > record > should return issue path
 âœ“ src/schemas/record/record.test.ts > record > should execute pipe
 âœ“ src/schemas/record/record.test.ts > record > should prevent prototype pollution
 âœ“ src/schemas/record/record.test.ts > record > should execute pipe if output is typed
 âœ“ src/schemas/record/record.test.ts > record > should skip pipe if output is not typed
 âœ“ src/schemas/symbol/symbolAsync.test.ts > symbolAsync > should pass only symbols
 âœ“ src/schemas/symbol/symbolAsync.test.ts > symbolAsync > should throw custom error
 âœ“ src/validations/minBytes/minBytes.test.ts > minBytes > should pass only valid byte lengths
 âœ“ src/validations/minBytes/minBytes.test.ts > minBytes > should return custom error message
 âœ“ src/schemas/blob/blobAsync.test.ts > blobAsync > should pass only blobs
 âœ“ src/schemas/blob/blobAsync.test.ts > blobAsync > should throw custom error
 âœ“ src/schemas/blob/blobAsync.test.ts > blobAsync > should execute pipe
 âœ“ src/validations/bytes/bytes.test.ts > bytes > should pass only valid byte lengths
 âœ“ src/validations/bytes/bytes.test.ts > bytes > should return custom error message
 âœ“ src/validations/maxBytes/maxBytes.test.ts > maxBytes > should pass only valid byte lengths
 âœ“ src/validations/maxBytes/maxBytes.test.ts > maxBytes > should return custom error message
 âœ“ src/schemas/enum/enum.test.ts > enum_ > should pass only enum values
 âœ“ src/schemas/enum/enum.test.ts > enum_ > should throw custom error
 âœ“ src/validations/size/size.test.ts > size > should pass only valid sizes
 âœ“ src/validations/size/size.test.ts > size > should return custom error message
 âœ“ src/schemas/void/void.test.ts > void > should pass only void
 âœ“ src/schemas/void/void.test.ts > void > should throw custom error
 âœ“ src/schemas/picklist/picklist.test.ts > picklist > should pass only picklist values
 âœ“ src/schemas/picklist/picklist.test.ts > picklist > should throw custom error
 âœ“ src/utils/schemaResult/schemaResult.test.ts > schemaResult > should return typed schema result
 âœ“ src/utils/schemaResult/schemaResult.test.ts > schemaResult > should return untyped schema result
 âœ“ src/utils/isLuhnAlgo/isLuhnAlgo.test.ts > isLuhnAlgo > should return correct boolean
 âœ“ src/validations/mimeType/mimeType.test.ts > mimeType > should pass only valid files
 âœ“ src/validations/mimeType/mimeType.test.ts > mimeType > should return custom error message
 âœ“ src/schemas/null/nullAsync.test.ts > nullAsync > should pass only null
 âœ“ src/schemas/null/nullAsync.test.ts > nullAsync > should throw custom error
 âœ“ src/methods/passthrough/passthrough.test.ts > passthrough > should passthrough unknown keys
 âœ“ src/schemas/unknown/unknownAsync.test.ts > unknownAsync > should pass unknown values
 âœ“ src/schemas/unknown/unknownAsync.test.ts > unknownAsync > should execute pipe
 âœ“ src/schemas/never/neverAsync.test.ts > neverAsync > should pass no value
 âœ“ src/schemas/never/neverAsync.test.ts > neverAsync > should throw custom error
 âœ“ src/validations/startsWith/startsWith.test.ts > startsWith > should pass only valid strings
 âœ“ src/validations/startsWith/startsWith.test.ts > startsWith > should return custom error message
 âœ“ src/validations/endsWith/endsWith.test.ts > endsWith > should pass only valid strings
 âœ“ src/validations/endsWith/endsWith.test.ts > endsWith > should return custom error message
 âœ“ src/methods/parse/parse.test.ts > parse > should parse schema
 âœ“ src/methods/parse/parse.test.ts > parse > should throw error
 âœ“ src/methods/coerce/coerce.test.ts > coerce > should coerce number to string
 âœ“ src/methods/coerce/coerce.test.ts > coerce > should coerce string to number
 âœ“ src/methods/coerce/coerce.test.ts > coerce > should coerce number to date
 âœ“ src/validations/regex/regex.test.ts > regex > should pass only valid strings
 âœ“ src/validations/regex/regex.test.ts > regex > should return custom error message
 âœ“ src/schemas/any/any.test.ts > any > should pass any values
 âœ“ src/schemas/any/any.test.ts > any > should execute pipe
 âœ“ src/storages/globalConfig/globalConfig.test.ts > config > should set and get global config
 âœ“ src/validations/notBytes/notBytes.test.ts > notBytes > should pass only valid byte lengths
 âœ“ src/validations/notBytes/notBytes.test.ts > notBytes > should return custom error message
 âœ“ src/schemas/undefined/undefined.test.ts > undefined > should pass only undefined
 âœ“ src/schemas/undefined/undefined.test.ts > undefined > should throw custom error
 âœ“ src/schemas/nan/nanAsync.test.ts > nanAsync > should pass only NaN
 âœ“ src/schemas/nan/nanAsync.test.ts > nanAsync > should throw custom error
 âœ“ src/schemas/any/anyAsync.test.ts > anyAsync > should pass any values
 âœ“ src/schemas/any/anyAsync.test.ts > anyAsync > should execute pipe
 âœ“ src/methods/getFallback/getFallback.test.ts > getFallback > should return undefined
 âœ“ src/methods/getFallback/getFallback.test.ts > getFallback > should return fallback value
 âœ“ src/schemas/symbol/symbol.test.ts > symbol > should pass only symbols
 âœ“ src/schemas/symbol/symbol.test.ts > symbol > should throw custom error
 âœ“ src/utils/actionIssue/actionIssue.test.ts > actionIssue > should return results with issues
 âœ“ src/schemas/null/null.test.ts > null_ > should pass only null
 âœ“ src/schemas/null/null.test.ts > null_ > should throw custom error
 âœ“ src/schemas/never/never.test.ts > never > should pass no value
 âœ“ src/schemas/never/never.test.ts > never > should throw custom error
 âœ“ src/validations/custom/customAsync.test.ts > customAsync > should validate by custom function
 âœ“ src/validations/custom/customAsync.test.ts > customAsync > should return custom error message
 âœ“ src/validations/every/every.test.ts > every > should validate by every function
 âœ“ src/validations/every/every.test.ts > every > should return every error message
 âœ“ src/validations/custom/custom.test.ts > custom > should validate by custom function
 âœ“ src/validations/custom/custom.test.ts > custom > should return custom error message
 âœ“ src/utils/actionOutput/actionOutput.test.ts > actionOutput > should return output results
 âœ“ src/utils/defaultArgs/defaultArgs.test.ts > defaultArgs > should return error and pipe
 âœ“ src/error/ValiError/ValiError.test.ts > ValiError > should create error instance
 âœ“ src/validations/some/some.test.ts > some > should validate by some function
 âœ“ src/validations/some/some.test.ts > some > should return some error message
 âœ“ src/transformations/toCustom/toCustomAsync.test.ts > toCustomAsync > should transform the custom
 âœ“ src/schemas/nan/nan.test.ts > nan > should pass only NaN
 âœ“ src/schemas/nan/nan.test.ts > nan > should throw custom error
 âœ“ src/schemas/unknown/unknown.test.ts > unknown > should pass unknown values
 âœ“ src/schemas/unknown/unknown.test.ts > unknown > should execute pipe
 âœ“ src/methods/unwrap/unwrap.test.ts > unwrap > should unwrap wrapped schema
 âœ“ src/transformations/toCustom/toCustom.test.ts > toCustom > should transform the custom
 âœ“ src/transformations/toMinValue/toMinValue.test.ts > toMinValue > should transform to a minimum value
 âœ“ src/methods/keyof/keyof.test.ts > keyof > should create enum schema
 âœ“ src/transformations/toMaxValue/toMaxValue.test.ts > toMaxValue > should transform to a maximum value
 âœ“ src/transformations/toLowerCase/toLowerCase.test.ts > toLowerCase > should transform to lower case
 âœ“ src/transformations/toTrimmed/toTrimmed.test.ts > toTrimmed > should transform to trimmed
 âœ“ src/transformations/toTrimmedEnd/toTrimmedEnd.test.ts > toTrimmedEnd > should transform to trimmed end
 âœ“ src/transformations/toUpperCase/toUpperCase.test.ts > toUpperCase > should transform to upper case
 âœ“ src/transformations/toTrimmedStart/toTrimmedStart.test.ts > toTrimmedStart > should transform to trimmed start
 âœ“ src/schemas/nonNullable/nonNullableAsync.test.ts > nonNullableAsync > should not pass null
 âœ“ src/schemas/nonNullable/nonNullableAsync.test.ts > nonNullableAsync > should throw custom error

 Test Files  198 passed (198)
      Tests  536 passed (536)
   Start at  11:42:25
   Duration  11.82s (transform 19.26s, setup 13ms, collect 119.65s, tests 2.68s, environment 165.89s, prepare 28.54s)
