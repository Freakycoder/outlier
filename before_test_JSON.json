[
  {
    "name": "packages/wxt/src/core/utils/__tests__/arrays.test.ts | Array Utils \u003E every \u003E should return true when the array is empty",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/arrays.test.ts | Array Utils \u003E every \u003E should return true when all item predicate's return true",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/arrays.test.ts | Array Utils \u003E every \u003E should return false when a single item predicate's return false",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/arrays.test.ts | Array Utils \u003E some \u003E should return true if one value returns true",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/arrays.test.ts | Array Utils \u003E some \u003E should return false if no values match",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/content-security-policy.test.ts | Content Security Policy Builder \u003E should add values to new directives correctly",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/content-security-policy.test.ts | Content Security Policy Builder \u003E should add to existing values",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/content-security-policy.test.ts | Content Security Policy Builder \u003E should not add duplicates",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/content-security-policy.test.ts | Content Security Policy Builder \u003E should sort the directives in the correct order",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E kebabCaseAlphanumeric \u003E should convert \"HELLO\" to \"hello\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E kebabCaseAlphanumeric \u003E should convert \"Hello, World!\" to \"hello-world\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E kebabCaseAlphanumeric \u003E should convert \"hello123\" to \"hello123\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E kebabCaseAlphanumeric \u003E should convert \"Hello World This Is A Test\" to \"hello-world-this-is-a-test\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E kebabCaseAlphanumeric \u003E should convert \"Hello     World\" to \"hello-world\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E kebabCaseAlphanumeric \u003E should convert \"hello-world\" to \"hello-world\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E safeVarName \u003E should convert 'Hello world!' to '_hello_world', which can be used for a variable name",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E safeVarName \u003E should convert '123' to '_123', which can be used for a variable name",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E safeVarName \u003E should convert 'abc-123' to '_abc_123', which can be used for a variable name",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E safeVarName \u003E should convert '' to '_', which can be used for a variable name",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E safeVarName \u003E should convert ' ' to '_', which can be used for a variable name",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E safeVarName \u003E should convert '_' to '_', which can be used for a variable name",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E removeImportStatements \u003E should remove all import formats",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/strings.test.ts | String utils \u003E removeImportStatements \u003E should not remove import.meta or inline import statements",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/entrypoints.test.ts | Entrypoint Utils \u003E getEntrypointName \u003E should convert /entrypoints/popup.html to popup",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/entrypoints.test.ts | Entrypoint Utils \u003E getEntrypointName \u003E should convert /entrypoints/options/index.html to options",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/entrypoints.test.ts | Entrypoint Utils \u003E getEntrypointName \u003E should convert /entrypoints/example.sandbox/index.html to example",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/entrypoints.test.ts | Entrypoint Utils \u003E getEntrypointName \u003E should convert /entrypoints/some.content/index.ts to some",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/entrypoints.test.ts | Entrypoint Utils \u003E getEntrypointName \u003E should convert /entrypoints/overlay.content.ts to overlay",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/entrypoints.test.ts | Entrypoint Utils \u003E getEntrypointOutputFile \u003E should return { name: 'popup', ext: '.html', outputDir: '/.output', expected: '/.output/popup.html' }",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/entrypoints.test.ts | Entrypoint Utils \u003E getEntrypointOutputFile \u003E should return { name: 'overlay', ext: '.ts', outputDir: '/.output/content-scripts', expected: '/.output/content-scripts/overlay.ts' }",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/entrypoints.test.ts | Entrypoint Utils \u003E resolvePerBrowserOption \u003E should return the value directly",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/entrypoints.test.ts | Entrypoint Utils \u003E resolvePerBrowserOption \u003E should return the value for the specific browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/transform.test.ts | Transform Utils \u003E removeMainFunctionCode \u003E should remove the first arrow function argument for defineBackground",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/transform.test.ts | Transform Utils \u003E removeMainFunctionCode \u003E should remove the first arrow function argument for defineUnlistedScript",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/transform.test.ts | Transform Utils \u003E removeMainFunctionCode \u003E should remove the first function argument for defineBackground",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/transform.test.ts | Transform Utils \u003E removeMainFunctionCode \u003E should remove the first function argument for defineUnlistedScript",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/transform.test.ts | Transform Utils \u003E removeMainFunctionCode \u003E should remove the main field from defineBackground",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/transform.test.ts | Transform Utils \u003E removeMainFunctionCode \u003E should remove the main field from defineContentScript",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/transform.test.ts | Transform Utils \u003E removeMainFunctionCode \u003E should remove the main field from defineUnlistedScript",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/transform.test.ts | Transform Utils \u003E removeMainFunctionCode \u003E should remove unused imports",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/transform.test.ts | Transform Utils \u003E removeMainFunctionCode \u003E should remove explict side-effect imports",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/paths.test.ts | Path Utils \u003E normalizePath \u003E should normalize \"../test.sh\" to \"../test.sh\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/paths.test.ts | Path Utils \u003E normalizePath \u003E should normalize \"..\\test.sh\" to \"../test.sh\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/paths.test.ts | Path Utils \u003E normalizePath \u003E should normalize \"test.png\" to \"test.png\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/paths.test.ts | Path Utils \u003E normalizePath \u003E should normalize \"C:\\\\path\\to\\file\" to \"C:/path/to/file\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/paths.test.ts | Path Utils \u003E normalizePath \u003E should normalize \"/path/to/file\" to \"/path/to/file\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/paths.test.ts | Path Utils \u003E normalizePath \u003E should normalize \"C:\\\\path\\to\\folder\\\" to \"C:/path/to/folder\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/paths.test.ts | Path Utils \u003E normalizePath \u003E should normalize \"/path/to/folder/\" to \"/path/to/folder\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/paths.test.ts | Path Utils \u003E normalizePath \u003E should normalize \"path\\\\\\file\" to \"path/file\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/paths.test.ts | Path Utils \u003E normalizePath \u003E should normalize \"path//file\" to \"path/file\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/sandbox/__tests__/define-unlisted-script.test.ts | defineUnlistedScript \u003E should return the object definition when given an object",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/sandbox/__tests__/define-unlisted-script.test.ts | defineUnlistedScript \u003E should return the object definition when given a main function",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/sandbox/__tests__/define-background.test.ts | defineBackground \u003E should return the object definition when given an object",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/sandbox/__tests__/define-background.test.ts | defineBackground \u003E should return the object definition when given a main function",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/virtual-modules.test.ts | Virtual Modules \u003E should resolve types to litteral values, not string",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/sandbox/__tests__/define-content-script.test.ts | defineContentScript \u003E should return the object passed in",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/package-managers/__tests__/yarn.test.ts | Yarn Package Management Utils \u003E listDependencies \u003E should list direct dependencies",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/package-managers/__tests__/yarn.test.ts | Yarn Package Management Utils \u003E listDependencies \u003E should list all dependencies",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/group-entrypoints.test.ts | groupEntrypoints \u003E should keep scripts separate",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/group-entrypoints.test.ts | groupEntrypoints \u003E should keep styles separate",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/group-entrypoints.test.ts | groupEntrypoints \u003E should group extension pages together",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/group-entrypoints.test.ts | groupEntrypoints \u003E should group sandbox pages together",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/group-entrypoints.test.ts | groupEntrypoints \u003E should group ESM compatible scripts with extension pages",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/modules.test.ts | Module Utilities \u003E addViteConfig \u003E should add base vite config",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/modules.test.ts | Module Utilities \u003E addViteConfig \u003E should allow user config to override any changes made",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/modules.test.ts | Module Utilities \u003E addImportPreset \u003E should add the import to the config",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/modules.test.ts | Module Utilities \u003E addImportPreset \u003E should not add duplicate presets",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/modules.test.ts | Module Utilities \u003E addImportPreset \u003E should not enable imports if they've been disabled",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/validation.test.ts | Validation Utils \u003E validateEntrypoints \u003E should return no errors when there are no errors",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/validation.test.ts | Validation Utils \u003E validateEntrypoints \u003E should return an error when exclude is not an array",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/validation.test.ts | Validation Utils \u003E validateEntrypoints \u003E should return an error when include is not an array",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/validation.test.ts | Validation Utils \u003E validateEntrypoints \u003E should return an error when content scripts don't have a matches",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/content-scripts.test.ts | Content Script Utils \u003E hashContentScriptOptions \u003E should return a string containing all the options with defaults applied",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/content-scripts.test.ts | Content Script Utils \u003E hashContentScriptOptions \u003E should be consistent regardless of the object ordering and default values",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/package-managers/__tests__/npm.test.ts | NPM Package Management Utils \u003E listDependencies \u003E should list direct dependencies",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/detect-dev-changes.test.ts | Detect Dev Changes \u003E No changes \u003E should return 'no-change' when the changed file isn't used by any of the entrypoints",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/detect-dev-changes.test.ts | Detect Dev Changes \u003E wxt.config.ts \u003E should return 'full-restart' when one of the changed files is the config file",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/detect-dev-changes.test.ts | Detect Dev Changes \u003E web-ext.config.ts \u003E should return 'browser-restart' when one of the changed files is the config file",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/detect-dev-changes.test.ts | Detect Dev Changes \u003E Public Assets \u003E should return 'extension-reload' without any groups to rebuild when the changed file is a public asset",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/detect-dev-changes.test.ts | Detect Dev Changes \u003E Background \u003E should rebuild the background and reload the extension when the changed file in it's chunks' `moduleIds` field",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/detect-dev-changes.test.ts | Detect Dev Changes \u003E HTML Pages \u003E should detect changes to entrypoints/\u003Cname\u003E.html files",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/detect-dev-changes.test.ts | Detect Dev Changes \u003E HTML Pages \u003E should detect changes to entrypoints/\u003Cname\u003E/index.html files",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/detect-dev-changes.test.ts | Detect Dev Changes \u003E Content Scripts \u003E should rebuild then reload only the effected content scripts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E getItem \u003E should return the value from the correct storage area",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E getItem \u003E should return the value if multiple : are use in the key",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E getItem \u003E should return null if the value doesn't exist",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E getItem \u003E should return the default value if passed in options",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E getItems \u003E should return an array of values",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E getMeta \u003E should return item metadata from key+$",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E getMeta \u003E should return an empty object if missing",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E setItem \u003E should set the value in the correct storage area",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E setItem \u003E should remove the item from storage when setting the value to undefined",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E setItem \u003E should remove the item from storage when setting the value to null",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E setItems \u003E should set multiple items in storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E setMeta \u003E should set metadata at key+$",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E setMeta \u003E should remove any properties set to undefined",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E setMeta \u003E should remove any properties set to null",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E removeItem \u003E should remove the key from storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E removeItem \u003E should not remove the metadata by default",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E removeItem \u003E should remove the metadata when requested",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E removeItems \u003E should remove multiple items",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E removeMeta \u003E should remove all metadata",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E removeMeta \u003E should only remove specific properties",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E snapshot \u003E should return a snapshot of the entire storage without area prefixes",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E snapshot \u003E should exclude specific properties and their metadata",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E restoreSnapshot \u003E should restore a snapshot object by setting all values in storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E restoreSnapshot \u003E should overwrite, not merge, any metadata keys in the snapshot",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E watch \u003E should not trigger if the changed key is different from the requested key",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E watch \u003E should not trigger if the value doesn't change",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E watch \u003E should call the callback when the value changes",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E watch \u003E should remove the listener when calling the returned function",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - local \u003E unwatch \u003E should remove all watch listeners",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E getItem \u003E should return the value from the correct storage area",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E getItem \u003E should return the value if multiple : are use in the key",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E getItem \u003E should return null if the value doesn't exist",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E getItem \u003E should return the default value if passed in options",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E getItems \u003E should return an array of values",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E getMeta \u003E should return item metadata from key+$",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E getMeta \u003E should return an empty object if missing",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E setItem \u003E should set the value in the correct storage area",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E setItem \u003E should remove the item from storage when setting the value to undefined",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E setItem \u003E should remove the item from storage when setting the value to null",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E setItems \u003E should set multiple items in storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E setMeta \u003E should set metadata at key+$",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E setMeta \u003E should remove any properties set to undefined",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E setMeta \u003E should remove any properties set to null",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E removeItem \u003E should remove the key from storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E removeItem \u003E should not remove the metadata by default",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E removeItem \u003E should remove the metadata when requested",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E removeItems \u003E should remove multiple items",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E removeMeta \u003E should remove all metadata",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E removeMeta \u003E should only remove specific properties",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E snapshot \u003E should return a snapshot of the entire storage without area prefixes",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E snapshot \u003E should exclude specific properties and their metadata",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E restoreSnapshot \u003E should restore a snapshot object by setting all values in storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E restoreSnapshot \u003E should overwrite, not merge, any metadata keys in the snapshot",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E watch \u003E should not trigger if the changed key is different from the requested key",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E watch \u003E should not trigger if the value doesn't change",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E watch \u003E should call the callback when the value changes",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E watch \u003E should remove the listener when calling the returned function",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - sync \u003E unwatch \u003E should remove all watch listeners",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E getItem \u003E should return the value from the correct storage area",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E getItem \u003E should return the value if multiple : are use in the key",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E getItem \u003E should return null if the value doesn't exist",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E getItem \u003E should return the default value if passed in options",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E getItems \u003E should return an array of values",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E getMeta \u003E should return item metadata from key+$",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E getMeta \u003E should return an empty object if missing",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E setItem \u003E should set the value in the correct storage area",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E setItem \u003E should remove the item from storage when setting the value to undefined",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E setItem \u003E should remove the item from storage when setting the value to null",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E setItems \u003E should set multiple items in storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E setMeta \u003E should set metadata at key+$",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E setMeta \u003E should remove any properties set to undefined",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E setMeta \u003E should remove any properties set to null",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E removeItem \u003E should remove the key from storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E removeItem \u003E should not remove the metadata by default",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E removeItem \u003E should remove the metadata when requested",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E removeItems \u003E should remove multiple items",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E removeMeta \u003E should remove all metadata",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E removeMeta \u003E should only remove specific properties",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E snapshot \u003E should return a snapshot of the entire storage without area prefixes",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E snapshot \u003E should exclude specific properties and their metadata",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E restoreSnapshot \u003E should restore a snapshot object by setting all values in storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E restoreSnapshot \u003E should overwrite, not merge, any metadata keys in the snapshot",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E watch \u003E should not trigger if the changed key is different from the requested key",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E watch \u003E should not trigger if the value doesn't change",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E watch \u003E should call the callback when the value changes",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E watch \u003E should remove the listener when calling the returned function",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - managed \u003E unwatch \u003E should remove all watch listeners",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E getItem \u003E should return the value from the correct storage area",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E getItem \u003E should return the value if multiple : are use in the key",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E getItem \u003E should return null if the value doesn't exist",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E getItem \u003E should return the default value if passed in options",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E getItems \u003E should return an array of values",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E getMeta \u003E should return item metadata from key+$",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E getMeta \u003E should return an empty object if missing",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E setItem \u003E should set the value in the correct storage area",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E setItem \u003E should remove the item from storage when setting the value to undefined",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E setItem \u003E should remove the item from storage when setting the value to null",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E setItems \u003E should set multiple items in storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E setMeta \u003E should set metadata at key+$",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E setMeta \u003E should remove any properties set to undefined",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E setMeta \u003E should remove any properties set to null",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E removeItem \u003E should remove the key from storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E removeItem \u003E should not remove the metadata by default",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E removeItem \u003E should remove the metadata when requested",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E removeItems \u003E should remove multiple items",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E removeMeta \u003E should remove all metadata",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E removeMeta \u003E should only remove specific properties",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E snapshot \u003E should return a snapshot of the entire storage without area prefixes",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E snapshot \u003E should exclude specific properties and their metadata",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E restoreSnapshot \u003E should restore a snapshot object by setting all values in storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E restoreSnapshot \u003E should overwrite, not merge, any metadata keys in the snapshot",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E watch \u003E should not trigger if the changed key is different from the requested key",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E watch \u003E should not trigger if the value doesn't change",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E watch \u003E should call the callback when the value changes",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E watch \u003E should remove the listener when calling the returned function",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E storage - session \u003E unwatch \u003E should remove all watch listeners",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E versioning \u003E should migrate values to the latest when a version upgrade is detected",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E versioning \u003E should not run migrations if the value doesn't exist yet",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E versioning \u003E should run the v2 migration when converting an unversioned item to a versioned one",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E versioning \u003E should not run old migrations if the version is unchanged",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E versioning \u003E should skip missing migration functions",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E versioning \u003E should throw an error if the new version is less than the previous version",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E getValue \u003E should return the value from storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E getValue \u003E should return null if missing",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E getValue \u003E should return the provided default value if missing",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E getMeta \u003E should return the value from storage at key+$",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E getMeta \u003E should return an empty object if missing",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E setValue \u003E should set the value in storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E setValue \u003E should remove the value in storage when undefined is passed in",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E setValue \u003E should remove the value in storage when null is passed in",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E setMeta \u003E should set metadata at key+$",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E setMeta \u003E should add to metadata if already present",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E removeValue \u003E should remove the key from storage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E removeValue \u003E should not remove the metadata by default",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E removeValue \u003E should remove the metadata when requested",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E removeMeta \u003E should remove all metadata",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E removeMeta \u003E should only remove specific properties",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E watch \u003E should not trigger if the changed key is different from the item's key",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E watch \u003E should not trigger if the value doesn't change",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E watch \u003E should call the callback when the value changes",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E watch \u003E should use the default value for the newValue when the item is removed",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E watch \u003E should use the default value for the oldItem when the item didn't exist in storage yet",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E watch \u003E should remove the listener when calling the returned function",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E unwatch \u003E should remove all watch listeners",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E fallback option \u003E should return the default value when provided",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E fallback option \u003E should return null when not provided",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E defaultValue option \u003E should return the default value when provided",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E defaultValue option \u003E should return null when not provided",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E init option \u003E should only call init once (per JS context) when calling getValue successively, avoiding race conditions",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E init option \u003E should initialize the value in storage immediately",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E types \u003E should define a nullable value when options are not passed",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E types \u003E should define a non-null value when options are passed with a nullish default value",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E defineItem \u003E types \u003E should define a nullable value when options are passed with null default value",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/__tests__/storage.test.ts | Storage Utils \u003E types \u003E should not accept keys without a valid storage area prefix",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E popup \u003E should include an action for mv3",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E popup \u003E should use the correct action for mv2: {\"expectedType\":\"browser_action\"}",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E popup \u003E should use the correct action for mv2: {\"inputType\":\"browser_action\",\"expectedType\":\"browser_action\"}",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E popup \u003E should use the correct action for mv2: {\"inputType\":\"page_action\",\"expectedType\":\"page_action\"}",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E action without popup \u003E should respect the action field in the manifest without a popup",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E action without popup \u003E should generate `browser_action` for MV2 when only `action` is defined",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E action without popup \u003E should keep the `page_action` for MV2 when both `action` and `page_action` are defined",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/builders/vite/plugins/__tests__/devHtmlPrerender.test.ts | Dev HTML Prerender Plugin \u003E pointToDevServer \u003E should transform \"style.css\" into \"http://localhost:5173/entrypoints/popup/style.css\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/builders/vite/plugins/__tests__/devHtmlPrerender.test.ts | Dev HTML Prerender Plugin \u003E pointToDevServer \u003E should transform \"./style.css\" into \"http://localhost:5173/entrypoints/popup/style.css\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/builders/vite/plugins/__tests__/devHtmlPrerender.test.ts | Dev HTML Prerender Plugin \u003E pointToDevServer \u003E should transform \"../style.css\" into \"http://localhost:5173/entrypoints/style.css\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/builders/vite/plugins/__tests__/devHtmlPrerender.test.ts | Dev HTML Prerender Plugin \u003E pointToDevServer \u003E should transform \"~/assets/style.css\" into \"http://localhost:5173/assets/style.css\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/builders/vite/plugins/__tests__/devHtmlPrerender.test.ts | Dev HTML Prerender Plugin \u003E pointToDevServer \u003E should transform \"~~/assets/style.css\" into \"http://localhost:5173/assets/style.css\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/builders/vite/plugins/__tests__/devHtmlPrerender.test.ts | Dev HTML Prerender Plugin \u003E pointToDevServer \u003E should transform \"~local/style.css\" into \"http://localhost:5173/style.css\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/builders/vite/plugins/__tests__/devHtmlPrerender.test.ts | Dev HTML Prerender Plugin \u003E pointToDevServer \u003E should transform \"~absolute/style.css\" into \"http://localhost:5173/assets/style.css\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/builders/vite/plugins/__tests__/devHtmlPrerender.test.ts | Dev HTML Prerender Plugin \u003E pointToDevServer \u003E should transform \"~file\" into \"http://localhost:5173/example.css\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/builders/vite/plugins/__tests__/devHtmlPrerender.test.ts | Dev HTML Prerender Plugin \u003E pointToDevServer \u003E should transform \"~outside/test.css\" into \"http://localhost:5173/@fs/some/non-root/test.css\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/builders/vite/plugins/__tests__/devHtmlPrerender.test.ts | Dev HTML Prerender Plugin \u003E pointToDevServer \u003E should transform \"https://example.com/style.css\" into \"https://example.com/style.css\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/import-entrypoint.test.ts | importEntrypointFile \u003E should return the default export of test-entrypoints/background.ts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/import-entrypoint.test.ts | importEntrypointFile \u003E should return the default export of test-entrypoints/content.ts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/import-entrypoint.test.ts | importEntrypointFile \u003E should return the default export of test-entrypoints/unlisted.ts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/import-entrypoint.test.ts | importEntrypointFile \u003E should return the default export of test-entrypoints/react.tsx",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/import-entrypoint.test.ts | importEntrypointFile \u003E should return the default export of test-entrypoints/with-named.ts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/import-entrypoint.test.ts | importEntrypointFile \u003E should return undefined when there is no default export",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/import-entrypoint.test.ts | importEntrypointFile \u003E should throw a custom error message when an imported variable is used before main",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/runners/__tests__/index.test.ts | createExtensionRunner \u003E should return a Safari runner when browser is \"safari\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/runners/__tests__/index.test.ts | createExtensionRunner \u003E should return a WSL runner when `is-wsl` is true",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/runners/__tests__/index.test.ts | createExtensionRunner \u003E should return a manual runner when `runner.disabled` is true",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/runners/__tests__/index.test.ts | createExtensionRunner \u003E should return a web-ext runner otherwise",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E dev \u003E should not pass any config when no flags are passed",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E action without popup \u003E should keep the custom `browser_action` for MV2 when both `action` and `browser_action` are defined",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E options \u003E should include a options_ui and chrome_style for chrome",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E options \u003E should include a options_ui and browser_style for firefox",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E background \u003E MV3 \u003E should include a service worker and type for chrome",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E background \u003E MV3 \u003E should include a service worker and type for safari",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E background \u003E MV3 \u003E should include a background script and type for firefox",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E background \u003E MV2 \u003E should include scripts and persistent for chrome",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E background \u003E MV2 \u003E should include scripts and persistent for safari",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E background \u003E MV2 \u003E should include a background script and persistent for firefox mv2",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E icons \u003E should auto-discover icons with the correct name",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E icons \u003E should return undefined when no icons are found",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E icons \u003E should allow icons to be overwritten from the wxt.config.ts file",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E content_scripts \u003E should group content scripts and styles together based on their manifest properties",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E content_scripts \u003E should merge any content scripts declared in wxt.config.ts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E content_scripts \u003E cssInjectionMode \u003E should add a CSS entry when cssInjectionMode is undefined",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E content_scripts \u003E cssInjectionMode \u003E should add a CSS entry when cssInjectionMode is manifest",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E content_scripts \u003E cssInjectionMode \u003E should not add an entry for CSS when cssInjectionMode is manual",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E content_scripts \u003E cssInjectionMode \u003E should not add an entry for CSS when cssInjectionMode is ui",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E content_scripts \u003E cssInjectionMode \u003E should add CSS file to `web_accessible_resources` when cssInjectionMode is \"ui\" for MV3",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E content_scripts \u003E cssInjectionMode \u003E should add CSS file to `web_accessible_resources` when cssInjectionMode is \"ui\" for MV2",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E content_scripts \u003E cssInjectionMode \u003E should strip the path off the match pattern so the pattern is valid for `web_accessible_resources`",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E content_scripts \u003E registration \u003E should throw an error when registration=runtime for MV2",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E content_scripts \u003E registration \u003E should add host_permissions instead of content_scripts when registration=runtime",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E sidepanel \u003E should include the side_panel and permission, ignoring all options for chrome",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E sidepanel \u003E should include the side_panel and permission, ignoring all options for safari",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E sidepanel \u003E should include the side_panel and permission, ignoring all options for edge",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E sidepanel \u003E should include a sidebar_action for firefox",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E web_accessible_resources \u003E should combine user defined resources and generated resources for MV3",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E web_accessible_resources \u003E should combine user defined resources and generated resources for MV2",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E web_accessible_resources \u003E should convert mv3 items to mv2 strings automatically",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E web_accessible_resources \u003E should convert mv2 strings to mv3 items with a warning automatically",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E transformManifest option \u003E should call the transformManifest option after the manifest is generated, but before it's returned",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E version \u003E should include version and version_name as is on chrome",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E version \u003E should include version and version_name as is on safari",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E version \u003E should include version and version_name as is on edge",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E version \u003E should not include a version_name on firefox because it is unsupported",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E version \u003E should not include the version_name if it is equal to version",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E version \u003E should log a warning if the version could not be detected",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E commands \u003E should include a command for reloading the extension during development",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E commands \u003E should customize the reload commands key binding if passing a custom command",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E commands \u003E should not include the reload command when it's been disabled",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E commands \u003E should not override any existing commands when adding the one to reload the extension",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E commands \u003E should not include the command if there are already 4 others (the max)",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E commands \u003E should not include the command when building an extension",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E Stripping keys \u003E firefox MV2 should only include that version's keys",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E Stripping keys \u003E chrome MV2 should only include that version's keys",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E Stripping keys \u003E safari MV2 should only include that version's keys",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E Stripping keys \u003E edge MV2 should only include that version's keys",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E Stripping keys \u003E firefox MV3 should only include that version's keys",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E Stripping keys \u003E chrome MV3 should only include that version's keys",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E Stripping keys \u003E safari MV3 should only include that version's keys",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E Stripping keys \u003E edge MV3 should only include that version's keys",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E host_permissions \u003E should keep host_permissions as-is for MV3",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E host_permissions \u003E should move host_permissions to permissions for MV2, ignoring duplicates",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E Dev mode \u003E should not add any code for production builds",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E Dev mode \u003E should add required permissions for dev mode to function for MV2",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E generateManifest \u003E Dev mode \u003E should add required permissions for dev mode to function for MV3",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E stripPathFromMatchPattern \u003E should convert \"\u003Call_urls\u003E\" to \"\u003Call_urls\u003E\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E stripPathFromMatchPattern \u003E should convert \"*://play.google.com/books/*\" to \"*://play.google.com/*\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E stripPathFromMatchPattern \u003E should convert \"*://*/*\" to \"*://*/*\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/manifest.test.ts | Manifest Utils \u003E stripPathFromMatchPattern \u003E should convert \"https://github.com/wxt-dev/*\" to \"https://github.com/*\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/package-managers/__tests__/pnpm.test.ts | PNPM Package Management Utils \u003E listDependencies \u003E should list direct dependencies",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/package.test.ts | Package JSON Utils \u003E getPackageJson \u003E should return the package.json inside \u003Croot\u003E/package.json",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/__tests__/package.test.ts | Package JSON Utils \u003E getPackageJson \u003E should return an empty object when \u003Croot\u003E/package.json doesn't exist",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/package-managers/__tests__/npm.test.ts | NPM Package Management Utils \u003E listDependencies \u003E should list all dependencies",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E dev \u003E should respect passing a custom root",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load popup entrypoint config from popup.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load popup entrypoint config from popup/index.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load options entrypoint config from options.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load options entrypoint config from options/index.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load content script entrypoint config from content.ts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load content script entrypoint config from overlay.content.ts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load content script entrypoint config from content/index.ts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load content script entrypoint config from overlay.content/index.ts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load content script entrypoint config from overlay.content.tsx",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load background entrypoint config from background.ts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load background entrypoint config from background/index.ts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load sidepanel entrypoint config from sidepanel.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load sidepanel entrypoint config from sidepanel/index.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load sidepanel entrypoint config from named.sidepanel.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load sidepanel entrypoint config from named.sidepanel/index.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should remove type=module from MV2 background scripts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should allow type=module for MV3 background service workers",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should include a virtual background script so dev reloading works when there isn't a background entrypoint defined by the user",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load unlisted-script entrypoint config from injected.ts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load unlisted-script entrypoint config from injected.tsx",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load unlisted-script entrypoint config from injected.js",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load unlisted-script entrypoint config from injected.jsx",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load unlisted-script entrypoint config from injected/index.ts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load unlisted-script entrypoint config from injected/index.tsx",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load unlisted-script entrypoint config from injected/index.js",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find and load unlisted-script entrypoint config from injected/index.jsx",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for sandbox.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for sandbox/index.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for named.sandbox.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for named.sandbox/index.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for bookmarks.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for bookmarks/index.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for history.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for history/index.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for newtab.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for newtab/index.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for devtools.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for devtools/index.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for onboarding.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for onboarding/index.html",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for iframe.scss",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for iframe.css",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for content.css",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for overlay.content.css",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for content/index.css",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should find entrypoint for overlay.content/index.css",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E should not allow multiple entrypoints with the same name",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E throw an error if there are no entrypoints",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E include option \u003E should filter out the background when include doesn't contain the target browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E include option \u003E should filter out content scripts when include doesn't contain the target browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E include option \u003E should filter out the popup when include doesn't contain the target browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E include option \u003E should filter out the options page when include doesn't contain the target browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E include option \u003E should filter out an unlisted page when include doesn't contain the target browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E exclude option \u003E should filter out the background when exclude contains the target browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E exclude option \u003E should filter out content scripts when exclude contains the target browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E exclude option \u003E should filter out the popup when exclude contains the target browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E exclude option \u003E should filter out the options page when exclude contains the target browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E exclude option \u003E should filter out an unlisted page when exclude contains the target browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/utils/building/__tests__/find-entrypoints.test.ts | findEntrypoints \u003E filterEntrypoints option \u003E should control entrypoints accessible",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E dev \u003E should respect a custom config file",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E dev \u003E should respect passing a custom mode",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E dev \u003E should respect passing a custom browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E dev \u003E should pass correct filtered entrypoints",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E dev \u003E should respect passing --mv2",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/package-managers/__tests__/pnpm.test.ts | PNPM Package Management Utils \u003E listDependencies \u003E should list all dependencies",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/core/package-managers/__tests__/npm.test.ts | NPM Package Management Utils \u003E downloadDependency \u003E should download the dependency as a tarball",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E dev \u003E should respect passing --mv3",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E dev \u003E should respect passing --port",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E dev \u003E should respect passing --debug",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E type \u003E integrated \u003E should add a wrapper and custom UI to the page",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E type \u003E integrated \u003E should allow customizing the wrapper tag",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E type \u003E iframe \u003E should add a wrapper and iframe to the page",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E type \u003E shadow-root \u003E should load a shadow root to the page",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E type \u003E shadow-root \u003E should respect the shadow root mode (open -\u003E open)",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E type \u003E shadow-root \u003E should respect the shadow root mode (undefined -\u003E open)",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E type \u003E shadow-root \u003E should respect the shadow root mode (closed -\u003E closed)",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E position \u003E inline \u003E should wrap the UI in a simple div",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E position \u003E overlay \u003E should wrap the UI in a positioned div when alignment=undefined",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E position \u003E overlay \u003E should wrap the UI in a positioned div when alignment=top-left",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E position \u003E overlay \u003E should wrap the UI in a positioned div when alignment=top-right",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E position \u003E overlay \u003E should wrap the UI in a positioned div when alignment=bottom-right",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E position \u003E overlay \u003E should wrap the UI in a positioned div when alignment=bottom-left",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E position \u003E overlay \u003E should respect the provided zIndex",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E position \u003E modal \u003E should wrap the UI in a div with a fixed position",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E position \u003E modal \u003E should respect the provided zIndex",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E anchor \u003E undefined \u003E should append the element to the body",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E anchor \u003E string \u003E should append the element using the specified query selector",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E anchor \u003E string \u003E should append the element using an XPath string",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E anchor \u003E Element \u003E should append the element using the specified element",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E anchor \u003E function \u003E should append the element using the specified function",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E anchor \u003E should throw an error when the anchor does not exist",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E append \u003E undefined \u003E should append the element as the last child of the anchor",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E append \u003E last \u003E should append the element as the last child of the anchor",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E append \u003E first \u003E should append the element as the last child of the anchor",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E append \u003E replace \u003E should replace the the anchor",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E append \u003E before \u003E should append the UI before the anchor",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E append \u003E after \u003E should append the UI after the anchor",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E append \u003E function \u003E should append the UI using a function",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E mounted value \u003E integrated \u003E should set the mounted value based on the onMounted return value",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E mounted value \u003E iframe \u003E should set the mounted value based on the onMounted return value",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/client/content-scripts/ui/__tests__/index.test.ts | Content Script UIs \u003E mounted value \u003E shadow-root \u003E should set the mounted value based on the onMounted return value",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E build \u003E should not pass any config when no flags are passed",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E build \u003E should respect passing a custom root",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E build \u003E should respect a custom config file",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/typescript-project.test.ts | TypeScript Project \u003E should generate defined constants correctly",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/e2e/tests/auto-imports.test.ts | Auto Imports \u003E imports: { ... } \u003E should generate a declaration file, imports.d.ts, for auto-imports",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/e2e/tests/hooks.test.ts | Hooks \u003E prepare should call hooks",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E build \u003E should respect passing a custom mode",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E build \u003E should respect passing a custom browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E build \u003E should pass correct filtered entrypoints",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/output-structure.test.ts | Output Directory Structure \u003E should not output hidden files and directories that start with \".\"",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E build \u003E should respect passing --mv2",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E build \u003E should respect passing --mv3",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E build \u003E should include analysis in the build",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/modules.test.ts | Module Helpers \u003E options \u003E should recieve the options defined in wxt.config.ts based on the configKey field",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/e2e/tests/user-config.test.ts | User Config \u003E should respect the 'src' directory",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E build \u003E should respect passing --debug",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/manifest-content.test.ts | Manifest Content (Vite runtime? vite-node) \u003E should respect the per-browser entrypoint option with {\"outDir\":\"chrome-mv3\"}",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E zip \u003E should not pass any config when no flags are passed",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/analysis.test.ts | Analysis \u003E should output a stats.html with no part files by default",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E zip \u003E should respect passing a custom root",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E zip \u003E should respect a custom config file",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E zip \u003E should respect passing a custom mode",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/typescript-project.test.ts | TypeScript Project \u003E should augment the types for browser.runtime.getURL",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E zip \u003E should respect passing a custom browser",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E zip \u003E should respect passing --mv2",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/auto-imports.test.ts | Auto Imports \u003E imports: { ... } \u003E should include auto-imports in the project",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E zip \u003E should respect passing --mv3",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E zip \u003E should respect passing --debug",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/remote-code.test.ts | Remote Code \u003E should download \"url:*\" modules and include them in the final bundle",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/e2e/tests/hooks.test.ts | Hooks \u003E build should call hooks",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E prepare \u003E should not pass any config when no flags are passed",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E prepare \u003E should respect passing a custom root",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E prepare \u003E should respect a custom config file",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E prepare \u003E should respect passing --debug",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E clean \u003E should not pass any config when no flags are passed",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E clean \u003E should respect passing a custom root",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/user-config.test.ts | User Config \u003E should respect the 'entrypoints' directory",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E clean \u003E should respect a custom config file",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/modules.test.ts | Module Helpers \u003E addEntrypoint \u003E should add a custom entrypoint to be bundled the project",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E clean \u003E should respect passing --debug",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/manifest-content.test.ts | Manifest Content (Vite runtime? vite-node) \u003E should respect the per-browser entrypoint option with {\"browser\":\"chrome\",\"outDir\":\"chrome-mv3\"}",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E init \u003E should not pass any options when no flags are passed",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/output-structure.test.ts | Output Directory Structure \u003E should output separate CSS files for each content script",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E init \u003E should respect the provided folder",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E init \u003E should respect passing --template",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/typescript-project.test.ts | TypeScript Project \u003E should augment the types for browser.i18n.getMessage",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/analysis.test.ts | Analysis \u003E should save part files when requested",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/auto-imports.test.ts | Auto Imports \u003E imports: false \u003E should not generate a imports.d.ts file",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/src/cli/__tests__/index.test.ts | CLI \u003E init \u003E should respect passing --pm",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/hooks.test.ts | Hooks \u003E zip should call hooks",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/react.test.ts | React \u003E should prepare and build an project with a tsx entrypoint",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/e2e/tests/user-config.test.ts | User Config \u003E should merge inline and user config based manifests",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/modules.test.ts | Module Helpers \u003E addPublicAssets \u003E should add public assets",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/typescript-project.test.ts | TypeScript Project \u003E should reference all the required types in a single declaration file",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/manifest-content.test.ts | Manifest Content (Vite runtime? vite-node) \u003E should respect the per-browser entrypoint option with {\"browser\":\"firefox\",\"outDir\":\"firefox-mv2\",\"expected\":true}",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/auto-imports.test.ts | Auto Imports \u003E imports: false \u003E should not include imports.d.ts in the type references",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/output-structure.test.ts | Output Directory Structure \u003E should allow inputs with invalid JS variable names, like dashes",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/analysis.test.ts | Analysis \u003E should support customizing the stats output directory",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/typescript-project.test.ts | TypeScript Project \u003E should generate a TSConfig file for the project",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/auto-imports.test.ts | Auto Imports \u003E eslintrc \u003E \"enabled: true\" should output a JSON config file compatible with ESlint 8",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/modules.test.ts | Module Helpers \u003E addPublicAssets \u003E should not overwrite the user's public files",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/manifest-content.test.ts | Manifest Content (Vite runtime? vite-node) \u003E should respect the per-browser entrypoint option with {\"browser\":\"safari\",\"outDir\":\"safari-mv2\",\"expected\":false}",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/output-structure.test.ts | Output Directory Structure \u003E should not include an entrypoint if the target browser is not in the list of included targets",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/analysis.test.ts | Analysis \u003E should place artifacts next to the custom output file",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/typescript-project.test.ts | TypeScript Project \u003E should generate correct path aliases for a custom srcDir",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/auto-imports.test.ts | Auto Imports \u003E eslintrc \u003E \"enabled: 8\" should output a JSON config file compatible with ESlint 8",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/user-config.test.ts | User Config \u003E should exclude the polyfill when extensionApi=\"chrome\"",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/init.test.ts | Init command \u003E should throw an error if the directory is not empty",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/modules.test.ts | Module Helpers \u003E addWxtPlugin \u003E should include the plugin in the background",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/output-structure.test.ts | Output Directory Structure \u003E should not include an entrypoint if the target browser is in the list of excluded targets",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/manifest-content.test.ts | Manifest Content (Vite runtime? jiti) \u003E should respect the per-browser entrypoint option with {\"outDir\":\"chrome-mv3\"}",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/analysis.test.ts | Analysis \u003E should open the stats in the browser when requested",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/typescript-project.test.ts | TypeScript Project \u003E should add additional path aliases listed in the alias config, preventing defaults from being overridden",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/auto-imports.test.ts | Auto Imports \u003E eslintrc \u003E \"enabled: 9\" should output a flat config file compatible with ESlint 9",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/user-config.test.ts | User Config \u003E should respect changing config files",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/modules.test.ts | Module Helpers \u003E addWxtPlugin \u003E should include the plugin in HTML entrypoints",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/zip.test.ts | Zipping \u003E should download packages and produce a valid build when zipping sources",
    "status": "FAILED"
  },
  {
    "name": "packages/wxt/e2e/tests/manifest-content.test.ts | Manifest Content (Vite runtime? jiti) \u003E should respect the per-browser entrypoint option with {\"browser\":\"chrome\",\"outDir\":\"chrome-mv3\"}",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/output-structure.test.ts | Output Directory Structure \u003E should generate a stats file when analyzing the bundle",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/hooks.test.ts | Hooks \u003E server.start should call hooks",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/auto-imports.test.ts | Auto Imports \u003E eslintrc \u003E should allow customizing the output",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/modules.test.ts | Module Helpers \u003E addWxtPlugin \u003E should include the plugin in content scripts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/manifest-content.test.ts | Manifest Content (Vite runtime? jiti) \u003E should respect the per-browser entrypoint option with {\"browser\":\"firefox\",\"outDir\":\"firefox-mv2\",\"expected\":true}",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/zip.test.ts | Zipping \u003E should correctly apply template variables for zip file names based on provided config",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/output-structure.test.ts | Output Directory Structure \u003E should support JavaScript entrypoints",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/modules.test.ts | Module Helpers \u003E addWxtPlugin \u003E should include the plugin in unlisted scripts",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/manifest-content.test.ts | Manifest Content (Vite runtime? jiti) \u003E should respect the per-browser entrypoint option with {\"browser\":\"safari\",\"outDir\":\"safari-mv2\",\"expected\":false}",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/output-structure.test.ts | Output Directory Structure \u003E should output to a custom directory when overriding 'outDir'",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/modules.test.ts | Module Helpers \u003E imports \u003E should add auto-imports",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/output-structure.test.ts | Output Directory Structure \u003E should generate ESM background script when type=module",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/auto-imports.test.ts | Auto Imports \u003E eslintrc \u003E Actual linting results \u003E ESLint 9 \u003E should have lint errors when not extending generated config",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/modules.test.ts | Module Helpers \u003E imports \u003E should add preset",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/output-structure.test.ts | Output Directory Structure \u003E should generate IIFE background script when type=undefined",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/auto-imports.test.ts | Auto Imports \u003E eslintrc \u003E Actual linting results \u003E ESLint 9 \u003E should not have any lint errors when configured",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/auto-imports.test.ts | Auto Imports \u003E eslintrc \u003E Actual linting results \u003E ESLint 8 \u003E should have lint errors when not extending generated config",
    "status": "PASSED"
  },
  {
    "name": "packages/wxt/e2e/tests/auto-imports.test.ts | Auto Imports \u003E eslintrc \u003E Actual linting results \u003E ESLint 8 \u003E should not have any lint errors when configured",
    "status": "PASSED"
  }
]
