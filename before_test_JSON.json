[
  {
    "name": "test/cache.test.ts | fetchJsonWithCache | should not cache data with failed request",
    "status": "PASSED"
  },
  {
    "name": "test/cache.test.ts | fetchJsonWithCache | should fetch data with cache enabled",
    "status": "PASSED"
  },
  {
    "name": "test/cache.test.ts | fetchJsonWithCache | should fetch data with cache enabled after previous test",
    "status": "PASSED"
  },
  {
    "name": "test/cache.test.ts | fetchJsonWithCache | should fetch data without cache for a single test",
    "status": "PASSED"
  },
  {
    "name": "test/cache.test.ts | fetchJsonWithCache | should still fetch data without cache for a single test",
    "status": "PASSED"
  },
  {
    "name": "test/providers.test.ts | providers | OpenAiCompletionProvider callApi",
    "status": "PASSED"
  },
  {
    "name": "test/providers.test.ts | providers | OpenAiChatCompletionProvider callApi",
    "status": "PASSED"
  },
  {
    "name": "test/providers.test.ts | providers | OpenAiChatCompletionProvider callApi with cache disabled",
    "status": "PASSED"
  },
  {
    "name": "test/providers.test.ts | providers | loadApiProvider with openai:chat",
    "status": "PASSED"
  },
  {
    "name": "test/providers.test.ts | providers | loadApiProvider with openai:completion",
    "status": "PASSED"
  },
  {
    "name": "test/providers.test.ts | providers | loadApiProvider with openai:chat:modelName",
    "status": "PASSED"
  },
  {
    "name": "test/providers.test.ts | providers | loadApiProvider with openai:completion:modelName",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | util | readPrompts with single prompt file",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | util | readPrompts with multiple prompt files",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | util | readPrompts with directory",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | util | readPrompts with empty input",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | util | readPrompts with map input",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | util | readVars with CSV input",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | util | readVars with JSON input",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | util | readVars with YAML input",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | util | writeOutput with CSV output",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | util | writeOutput with JSON output",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | util | writeOutput with YAML output",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | readTests | readTests with no input",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | readTests | readTests with string input",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | readTests | readTests with array input",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | runAssertions | should pass when all assertions pass",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | runAssertions | should fail when any assertion fails",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | runAssertion | should pass when the equality assertion passes",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | runAssertion | should fail when the equality assertion fails",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | runAssertion | should pass when the is-json assertion passes",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | runAssertion | should fail when the is-json assertion fails",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | runAssertion | should pass when the contains-json assertion passes",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | runAssertion | should fail when the contains-json assertion fails",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | runAssertion | should pass when the function assertion passes",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | runAssertion | should fail when the function assertion fails",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should pass when the not-contains assertion passes",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should fail when the not-contains assertion fails",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should pass when the icontains assertion passes",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should fail when the icontains assertion fails",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should pass when the not-icontains assertion passes",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should fail when the not-icontains assertion fails",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should pass when the contains-any assertion passes",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should fail when the contains-any assertion fails",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should pass when the contains-all assertion passes",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should fail when the contains-all assertion fails",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should pass when the regex assertion passes",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should fail when the regex assertion fails",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should pass when the not-regex assertion passes",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | ✕ should fail when the function does not match vars (7 ms) | should fail when the not-regex assertion fails",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | assertionFromString | should create an equality assertion",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | assertionFromString | should create an is-json assertion",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | assertionFromString | should create an contains-json assertion",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | assertionFromString | should create a function assertion",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | assertionFromString | should create a similarity assertion",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | assertionFromString | should create a contains assertion",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | assertionFromString | should create a not-contains assertion",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | assertionFromString | should create a contains-any assertion",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | assertionFromString | should create a contains-all assertion",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | assertionFromString | should create a regex assertion",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | assertionFromString | should create a not-regex assertion",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | assertionFromString | should create an icontains assertion",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | assertionFromString | should create a not-icontains assertion",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | matchesSimilarity | should pass when similarity is above the threshold",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | matchesSimilarity | should fail when similarity is below the threshold",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | matchesSimilarity | should fail when inverted similarity is above the threshold",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | matchesSimilarity | should pass when inverted similarity is below the threshold",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | matchesLlmRubric | should pass when the grading provider returns a passing result",
    "status": "PASSED"
  },
  {
    "name": "test/util.test.ts | matchesLlmRubric | should fail when the grading provider returns a failing result",
    "status": "PASSED"
  }
]
